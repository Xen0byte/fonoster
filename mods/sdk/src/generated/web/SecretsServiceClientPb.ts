/**
 * @fileoverview gRPC-Web generated client stub for fonoster.secrets.v1beta2
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: secrets.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as secrets_pb from './secrets_pb'; // proto import: "secrets.proto"


export class SecretsClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateSecret = new grpcWeb.MethodDescriptor(
    '/fonoster.secrets.v1beta2.Secrets/CreateSecret',
    grpcWeb.MethodType.UNARY,
    secrets_pb.CreateSecretRequest,
    secrets_pb.CreateSecretResponse,
    (request: secrets_pb.CreateSecretRequest) => {
      return request.serializeBinary();
    },
    secrets_pb.CreateSecretResponse.deserializeBinary
  );

  createSecret(
    request: secrets_pb.CreateSecretRequest,
    metadata?: grpcWeb.Metadata | null): Promise<secrets_pb.CreateSecretResponse>;

  createSecret(
    request: secrets_pb.CreateSecretRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: secrets_pb.CreateSecretResponse) => void): grpcWeb.ClientReadableStream<secrets_pb.CreateSecretResponse>;

  createSecret(
    request: secrets_pb.CreateSecretRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: secrets_pb.CreateSecretResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/fonoster.secrets.v1beta2.Secrets/CreateSecret',
        request,
        metadata || {},
        this.methodDescriptorCreateSecret,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/fonoster.secrets.v1beta2.Secrets/CreateSecret',
    request,
    metadata || {},
    this.methodDescriptorCreateSecret);
  }

  methodDescriptorUpdateSecret = new grpcWeb.MethodDescriptor(
    '/fonoster.secrets.v1beta2.Secrets/UpdateSecret',
    grpcWeb.MethodType.UNARY,
    secrets_pb.UpdateSecretRequest,
    secrets_pb.UpdateSecretResponse,
    (request: secrets_pb.UpdateSecretRequest) => {
      return request.serializeBinary();
    },
    secrets_pb.UpdateSecretResponse.deserializeBinary
  );

  updateSecret(
    request: secrets_pb.UpdateSecretRequest,
    metadata?: grpcWeb.Metadata | null): Promise<secrets_pb.UpdateSecretResponse>;

  updateSecret(
    request: secrets_pb.UpdateSecretRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: secrets_pb.UpdateSecretResponse) => void): grpcWeb.ClientReadableStream<secrets_pb.UpdateSecretResponse>;

  updateSecret(
    request: secrets_pb.UpdateSecretRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: secrets_pb.UpdateSecretResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/fonoster.secrets.v1beta2.Secrets/UpdateSecret',
        request,
        metadata || {},
        this.methodDescriptorUpdateSecret,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/fonoster.secrets.v1beta2.Secrets/UpdateSecret',
    request,
    metadata || {},
    this.methodDescriptorUpdateSecret);
  }

  methodDescriptorGetSecret = new grpcWeb.MethodDescriptor(
    '/fonoster.secrets.v1beta2.Secrets/GetSecret',
    grpcWeb.MethodType.UNARY,
    secrets_pb.GetSecretRequest,
    secrets_pb.Secret,
    (request: secrets_pb.GetSecretRequest) => {
      return request.serializeBinary();
    },
    secrets_pb.Secret.deserializeBinary
  );

  getSecret(
    request: secrets_pb.GetSecretRequest,
    metadata?: grpcWeb.Metadata | null): Promise<secrets_pb.Secret>;

  getSecret(
    request: secrets_pb.GetSecretRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: secrets_pb.Secret) => void): grpcWeb.ClientReadableStream<secrets_pb.Secret>;

  getSecret(
    request: secrets_pb.GetSecretRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: secrets_pb.Secret) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/fonoster.secrets.v1beta2.Secrets/GetSecret',
        request,
        metadata || {},
        this.methodDescriptorGetSecret,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/fonoster.secrets.v1beta2.Secrets/GetSecret',
    request,
    metadata || {},
    this.methodDescriptorGetSecret);
  }

  methodDescriptorDeleteSecret = new grpcWeb.MethodDescriptor(
    '/fonoster.secrets.v1beta2.Secrets/DeleteSecret',
    grpcWeb.MethodType.UNARY,
    secrets_pb.DeleteSecretRequest,
    secrets_pb.DeleteSecretResponse,
    (request: secrets_pb.DeleteSecretRequest) => {
      return request.serializeBinary();
    },
    secrets_pb.DeleteSecretResponse.deserializeBinary
  );

  deleteSecret(
    request: secrets_pb.DeleteSecretRequest,
    metadata?: grpcWeb.Metadata | null): Promise<secrets_pb.DeleteSecretResponse>;

  deleteSecret(
    request: secrets_pb.DeleteSecretRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: secrets_pb.DeleteSecretResponse) => void): grpcWeb.ClientReadableStream<secrets_pb.DeleteSecretResponse>;

  deleteSecret(
    request: secrets_pb.DeleteSecretRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: secrets_pb.DeleteSecretResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/fonoster.secrets.v1beta2.Secrets/DeleteSecret',
        request,
        metadata || {},
        this.methodDescriptorDeleteSecret,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/fonoster.secrets.v1beta2.Secrets/DeleteSecret',
    request,
    metadata || {},
    this.methodDescriptorDeleteSecret);
  }

  methodDescriptorListSecrets = new grpcWeb.MethodDescriptor(
    '/fonoster.secrets.v1beta2.Secrets/ListSecrets',
    grpcWeb.MethodType.UNARY,
    secrets_pb.ListSecretsRequest,
    secrets_pb.ListSecretsResponse,
    (request: secrets_pb.ListSecretsRequest) => {
      return request.serializeBinary();
    },
    secrets_pb.ListSecretsResponse.deserializeBinary
  );

  listSecrets(
    request: secrets_pb.ListSecretsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<secrets_pb.ListSecretsResponse>;

  listSecrets(
    request: secrets_pb.ListSecretsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: secrets_pb.ListSecretsResponse) => void): grpcWeb.ClientReadableStream<secrets_pb.ListSecretsResponse>;

  listSecrets(
    request: secrets_pb.ListSecretsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: secrets_pb.ListSecretsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/fonoster.secrets.v1beta2.Secrets/ListSecrets',
        request,
        metadata || {},
        this.methodDescriptorListSecrets,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/fonoster.secrets.v1beta2.Secrets/ListSecrets',
    request,
    metadata || {},
    this.methodDescriptorListSecrets);
  }

}

