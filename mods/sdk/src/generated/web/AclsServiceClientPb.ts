/**
 * @fileoverview gRPC-Web generated client stub for fonoster.acls.v1beta2
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: acls.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as acls_pb from './acls_pb'; // proto import: "acls.proto"


export class AclsClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateAcl = new grpcWeb.MethodDescriptor(
    '/fonoster.acls.v1beta2.Acls/CreateAcl',
    grpcWeb.MethodType.UNARY,
    acls_pb.CreateAclRequest,
    acls_pb.CreateAclResponse,
    (request: acls_pb.CreateAclRequest) => {
      return request.serializeBinary();
    },
    acls_pb.CreateAclResponse.deserializeBinary
  );

  createAcl(
    request: acls_pb.CreateAclRequest,
    metadata?: grpcWeb.Metadata | null): Promise<acls_pb.CreateAclResponse>;

  createAcl(
    request: acls_pb.CreateAclRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: acls_pb.CreateAclResponse) => void): grpcWeb.ClientReadableStream<acls_pb.CreateAclResponse>;

  createAcl(
    request: acls_pb.CreateAclRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: acls_pb.CreateAclResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/fonoster.acls.v1beta2.Acls/CreateAcl',
        request,
        metadata || {},
        this.methodDescriptorCreateAcl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/fonoster.acls.v1beta2.Acls/CreateAcl',
    request,
    metadata || {},
    this.methodDescriptorCreateAcl);
  }

  methodDescriptorUpdateAcl = new grpcWeb.MethodDescriptor(
    '/fonoster.acls.v1beta2.Acls/UpdateAcl',
    grpcWeb.MethodType.UNARY,
    acls_pb.UpdateAclRequest,
    acls_pb.UpdateAclResponse,
    (request: acls_pb.UpdateAclRequest) => {
      return request.serializeBinary();
    },
    acls_pb.UpdateAclResponse.deserializeBinary
  );

  updateAcl(
    request: acls_pb.UpdateAclRequest,
    metadata?: grpcWeb.Metadata | null): Promise<acls_pb.UpdateAclResponse>;

  updateAcl(
    request: acls_pb.UpdateAclRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: acls_pb.UpdateAclResponse) => void): grpcWeb.ClientReadableStream<acls_pb.UpdateAclResponse>;

  updateAcl(
    request: acls_pb.UpdateAclRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: acls_pb.UpdateAclResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/fonoster.acls.v1beta2.Acls/UpdateAcl',
        request,
        metadata || {},
        this.methodDescriptorUpdateAcl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/fonoster.acls.v1beta2.Acls/UpdateAcl',
    request,
    metadata || {},
    this.methodDescriptorUpdateAcl);
  }

  methodDescriptorGetAcl = new grpcWeb.MethodDescriptor(
    '/fonoster.acls.v1beta2.Acls/GetAcl',
    grpcWeb.MethodType.UNARY,
    acls_pb.GetAclRequest,
    acls_pb.Acl,
    (request: acls_pb.GetAclRequest) => {
      return request.serializeBinary();
    },
    acls_pb.Acl.deserializeBinary
  );

  getAcl(
    request: acls_pb.GetAclRequest,
    metadata?: grpcWeb.Metadata | null): Promise<acls_pb.Acl>;

  getAcl(
    request: acls_pb.GetAclRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: acls_pb.Acl) => void): grpcWeb.ClientReadableStream<acls_pb.Acl>;

  getAcl(
    request: acls_pb.GetAclRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: acls_pb.Acl) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/fonoster.acls.v1beta2.Acls/GetAcl',
        request,
        metadata || {},
        this.methodDescriptorGetAcl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/fonoster.acls.v1beta2.Acls/GetAcl',
    request,
    metadata || {},
    this.methodDescriptorGetAcl);
  }

  methodDescriptorDeleteAcl = new grpcWeb.MethodDescriptor(
    '/fonoster.acls.v1beta2.Acls/DeleteAcl',
    grpcWeb.MethodType.UNARY,
    acls_pb.DeleteAclRequest,
    acls_pb.DeleteAclResponse,
    (request: acls_pb.DeleteAclRequest) => {
      return request.serializeBinary();
    },
    acls_pb.DeleteAclResponse.deserializeBinary
  );

  deleteAcl(
    request: acls_pb.DeleteAclRequest,
    metadata?: grpcWeb.Metadata | null): Promise<acls_pb.DeleteAclResponse>;

  deleteAcl(
    request: acls_pb.DeleteAclRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: acls_pb.DeleteAclResponse) => void): grpcWeb.ClientReadableStream<acls_pb.DeleteAclResponse>;

  deleteAcl(
    request: acls_pb.DeleteAclRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: acls_pb.DeleteAclResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/fonoster.acls.v1beta2.Acls/DeleteAcl',
        request,
        metadata || {},
        this.methodDescriptorDeleteAcl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/fonoster.acls.v1beta2.Acls/DeleteAcl',
    request,
    metadata || {},
    this.methodDescriptorDeleteAcl);
  }

  methodDescriptorListAcls = new grpcWeb.MethodDescriptor(
    '/fonoster.acls.v1beta2.Acls/ListAcls',
    grpcWeb.MethodType.UNARY,
    acls_pb.ListAclsRequest,
    acls_pb.ListAclsResponse,
    (request: acls_pb.ListAclsRequest) => {
      return request.serializeBinary();
    },
    acls_pb.ListAclsResponse.deserializeBinary
  );

  listAcls(
    request: acls_pb.ListAclsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<acls_pb.ListAclsResponse>;

  listAcls(
    request: acls_pb.ListAclsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: acls_pb.ListAclsResponse) => void): grpcWeb.ClientReadableStream<acls_pb.ListAclsResponse>;

  listAcls(
    request: acls_pb.ListAclsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: acls_pb.ListAclsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/fonoster.acls.v1beta2.Acls/ListAcls',
        request,
        metadata || {},
        this.methodDescriptorListAcls,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/fonoster.acls.v1beta2.Acls/ListAcls',
    request,
    metadata || {},
    this.methodDescriptorListAcls);
  }

}

