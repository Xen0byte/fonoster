// source: numbers.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.fonoster.numbers.v1beta2.CreateNumberRequest', null, global);
goog.exportSymbol('proto.fonoster.numbers.v1beta2.CreateNumberRequest.IngressHandlerCase', null, global);
goog.exportSymbol('proto.fonoster.numbers.v1beta2.CreateNumberResponse', null, global);
goog.exportSymbol('proto.fonoster.numbers.v1beta2.DeleteNumberRequest', null, global);
goog.exportSymbol('proto.fonoster.numbers.v1beta2.DeleteNumberResponse', null, global);
goog.exportSymbol('proto.fonoster.numbers.v1beta2.GetNumberRequest', null, global);
goog.exportSymbol('proto.fonoster.numbers.v1beta2.ListNumbersRequest', null, global);
goog.exportSymbol('proto.fonoster.numbers.v1beta2.ListNumbersResponse', null, global);
goog.exportSymbol('proto.fonoster.numbers.v1beta2.Number', null, global);
goog.exportSymbol('proto.fonoster.numbers.v1beta2.Number.IngressHandlerCase', null, global);
goog.exportSymbol('proto.fonoster.numbers.v1beta2.Number.Trunk', null, global);
goog.exportSymbol('proto.fonoster.numbers.v1beta2.UpdateNumberRequest', null, global);
goog.exportSymbol('proto.fonoster.numbers.v1beta2.UpdateNumberRequest.IngressHandlerCase', null, global);
goog.exportSymbol('proto.fonoster.numbers.v1beta2.UpdateNumberResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.numbers.v1beta2.Number = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.fonoster.numbers.v1beta2.Number.oneofGroups_);
};
goog.inherits(proto.fonoster.numbers.v1beta2.Number, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.numbers.v1beta2.Number.displayName = 'proto.fonoster.numbers.v1beta2.Number';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.numbers.v1beta2.Number.Trunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.numbers.v1beta2.Number.Trunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.numbers.v1beta2.Number.Trunk.displayName = 'proto.fonoster.numbers.v1beta2.Number.Trunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.fonoster.numbers.v1beta2.CreateNumberRequest.oneofGroups_);
};
goog.inherits(proto.fonoster.numbers.v1beta2.CreateNumberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.numbers.v1beta2.CreateNumberRequest.displayName = 'proto.fonoster.numbers.v1beta2.CreateNumberRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.numbers.v1beta2.CreateNumberResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.numbers.v1beta2.CreateNumberResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.numbers.v1beta2.CreateNumberResponse.displayName = 'proto.fonoster.numbers.v1beta2.CreateNumberResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.fonoster.numbers.v1beta2.UpdateNumberRequest.oneofGroups_);
};
goog.inherits(proto.fonoster.numbers.v1beta2.UpdateNumberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.numbers.v1beta2.UpdateNumberRequest.displayName = 'proto.fonoster.numbers.v1beta2.UpdateNumberRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.numbers.v1beta2.UpdateNumberResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.numbers.v1beta2.UpdateNumberResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.numbers.v1beta2.UpdateNumberResponse.displayName = 'proto.fonoster.numbers.v1beta2.UpdateNumberResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.numbers.v1beta2.GetNumberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.numbers.v1beta2.GetNumberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.numbers.v1beta2.GetNumberRequest.displayName = 'proto.fonoster.numbers.v1beta2.GetNumberRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.numbers.v1beta2.DeleteNumberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.numbers.v1beta2.DeleteNumberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.numbers.v1beta2.DeleteNumberRequest.displayName = 'proto.fonoster.numbers.v1beta2.DeleteNumberRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.numbers.v1beta2.DeleteNumberResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.numbers.v1beta2.DeleteNumberResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.numbers.v1beta2.DeleteNumberResponse.displayName = 'proto.fonoster.numbers.v1beta2.DeleteNumberResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.numbers.v1beta2.ListNumbersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.numbers.v1beta2.ListNumbersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.numbers.v1beta2.ListNumbersRequest.displayName = 'proto.fonoster.numbers.v1beta2.ListNumbersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.numbers.v1beta2.ListNumbersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fonoster.numbers.v1beta2.ListNumbersResponse.repeatedFields_, null);
};
goog.inherits(proto.fonoster.numbers.v1beta2.ListNumbersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.numbers.v1beta2.ListNumbersResponse.displayName = 'proto.fonoster.numbers.v1beta2.ListNumbersResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.fonoster.numbers.v1beta2.Number.oneofGroups_ = [[10,11]];

/**
 * @enum {number}
 */
proto.fonoster.numbers.v1beta2.Number.IngressHandlerCase = {
  INGRESS_HANDLER_NOT_SET: 0,
  AGENT_AOR: 10,
  APP_REF: 11
};

/**
 * @return {proto.fonoster.numbers.v1beta2.Number.IngressHandlerCase}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.getIngressHandlerCase = function() {
  return /** @type {proto.fonoster.numbers.v1beta2.Number.IngressHandlerCase} */(jspb.Message.computeOneofCase(this, proto.fonoster.numbers.v1beta2.Number.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.numbers.v1beta2.Number.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.numbers.v1beta2.Number} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.Number.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
telUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
city: jspb.Message.getFieldWithDefault(msg, 4, ""),
country: jspb.Message.getFieldWithDefault(msg, 5, ""),
countryIsoCode: jspb.Message.getFieldWithDefault(msg, 6, ""),
createdAt: jspb.Message.getFieldWithDefault(msg, 7, 0),
updatedAt: jspb.Message.getFieldWithDefault(msg, 8, 0),
trunk: (f = msg.getTrunk()) && proto.fonoster.numbers.v1beta2.Number.Trunk.toObject(includeInstance, f),
agentAor: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
appRef: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.numbers.v1beta2.Number}
 */
proto.fonoster.numbers.v1beta2.Number.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.numbers.v1beta2.Number;
  return proto.fonoster.numbers.v1beta2.Number.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.numbers.v1beta2.Number} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.numbers.v1beta2.Number}
 */
proto.fonoster.numbers.v1beta2.Number.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTelUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryIsoCode(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreatedAt(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpdatedAt(value);
      break;
    case 9:
      var value = new proto.fonoster.numbers.v1beta2.Number.Trunk;
      reader.readMessage(value,proto.fonoster.numbers.v1beta2.Number.Trunk.deserializeBinaryFromReader);
      msg.setTrunk(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentAor(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.numbers.v1beta2.Number.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.numbers.v1beta2.Number} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.Number.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTelUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCountryIsoCode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getTrunk();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.fonoster.numbers.v1beta2.Number.Trunk.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.numbers.v1beta2.Number.Trunk.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.numbers.v1beta2.Number.Trunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.numbers.v1beta2.Number.Trunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.Number.Trunk.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.numbers.v1beta2.Number.Trunk}
 */
proto.fonoster.numbers.v1beta2.Number.Trunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.numbers.v1beta2.Number.Trunk;
  return proto.fonoster.numbers.v1beta2.Number.Trunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.numbers.v1beta2.Number.Trunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.numbers.v1beta2.Number.Trunk}
 */
proto.fonoster.numbers.v1beta2.Number.Trunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.numbers.v1beta2.Number.Trunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.numbers.v1beta2.Number.Trunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.numbers.v1beta2.Number.Trunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.Number.Trunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.Number.Trunk.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.Number.Trunk} returns this
 */
proto.fonoster.numbers.v1beta2.Number.Trunk.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.Number.Trunk.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.Number.Trunk} returns this
 */
proto.fonoster.numbers.v1beta2.Number.Trunk.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.Number} returns this
 */
proto.fonoster.numbers.v1beta2.Number.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.Number} returns this
 */
proto.fonoster.numbers.v1beta2.Number.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tel_url = 3;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.getTelUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.Number} returns this
 */
proto.fonoster.numbers.v1beta2.Number.prototype.setTelUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string city = 4;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.Number} returns this
 */
proto.fonoster.numbers.v1beta2.Number.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string country = 5;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.Number} returns this
 */
proto.fonoster.numbers.v1beta2.Number.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string country_iso_code = 6;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.getCountryIsoCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.Number} returns this
 */
proto.fonoster.numbers.v1beta2.Number.prototype.setCountryIsoCode = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 created_at = 7;
 * @return {number}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.numbers.v1beta2.Number} returns this
 */
proto.fonoster.numbers.v1beta2.Number.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 updated_at = 8;
 * @return {number}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.numbers.v1beta2.Number} returns this
 */
proto.fonoster.numbers.v1beta2.Number.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional Trunk trunk = 9;
 * @return {?proto.fonoster.numbers.v1beta2.Number.Trunk}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.getTrunk = function() {
  return /** @type{?proto.fonoster.numbers.v1beta2.Number.Trunk} */ (
    jspb.Message.getWrapperField(this, proto.fonoster.numbers.v1beta2.Number.Trunk, 9));
};


/**
 * @param {?proto.fonoster.numbers.v1beta2.Number.Trunk|undefined} value
 * @return {!proto.fonoster.numbers.v1beta2.Number} returns this
*/
proto.fonoster.numbers.v1beta2.Number.prototype.setTrunk = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fonoster.numbers.v1beta2.Number} returns this
 */
proto.fonoster.numbers.v1beta2.Number.prototype.clearTrunk = function() {
  return this.setTrunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.hasTrunk = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string agent_aor = 10;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.getAgentAor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.Number} returns this
 */
proto.fonoster.numbers.v1beta2.Number.prototype.setAgentAor = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.fonoster.numbers.v1beta2.Number.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.fonoster.numbers.v1beta2.Number} returns this
 */
proto.fonoster.numbers.v1beta2.Number.prototype.clearAgentAor = function() {
  return jspb.Message.setOneofField(this, 10, proto.fonoster.numbers.v1beta2.Number.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.hasAgentAor = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string app_ref = 11;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.getAppRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.Number} returns this
 */
proto.fonoster.numbers.v1beta2.Number.prototype.setAppRef = function(value) {
  return jspb.Message.setOneofField(this, 11, proto.fonoster.numbers.v1beta2.Number.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.fonoster.numbers.v1beta2.Number} returns this
 */
proto.fonoster.numbers.v1beta2.Number.prototype.clearAppRef = function() {
  return jspb.Message.setOneofField(this, 11, proto.fonoster.numbers.v1beta2.Number.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.numbers.v1beta2.Number.prototype.hasAppRef = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.oneofGroups_ = [[7,8]];

/**
 * @enum {number}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.IngressHandlerCase = {
  INGRESS_HANDLER_NOT_SET: 0,
  AGENT_AOR: 7,
  APP_REF: 8
};

/**
 * @return {proto.fonoster.numbers.v1beta2.CreateNumberRequest.IngressHandlerCase}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.getIngressHandlerCase = function() {
  return /** @type {proto.fonoster.numbers.v1beta2.CreateNumberRequest.IngressHandlerCase} */(jspb.Message.computeOneofCase(this, proto.fonoster.numbers.v1beta2.CreateNumberRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.numbers.v1beta2.CreateNumberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.numbers.v1beta2.CreateNumberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
telUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
city: jspb.Message.getFieldWithDefault(msg, 3, ""),
country: jspb.Message.getFieldWithDefault(msg, 4, ""),
countryIsoCode: jspb.Message.getFieldWithDefault(msg, 5, ""),
trunkRef: jspb.Message.getFieldWithDefault(msg, 6, ""),
agentAor: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
appRef: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.numbers.v1beta2.CreateNumberRequest}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.numbers.v1beta2.CreateNumberRequest;
  return proto.fonoster.numbers.v1beta2.CreateNumberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.numbers.v1beta2.CreateNumberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.numbers.v1beta2.CreateNumberRequest}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTelUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryIsoCode(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrunkRef(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentAor(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.numbers.v1beta2.CreateNumberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.numbers.v1beta2.CreateNumberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTelUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCountryIsoCode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTrunkRef();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.CreateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tel_url = 2;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.getTelUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.CreateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.setTelUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string city = 3;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.CreateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string country = 4;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.CreateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string country_iso_code = 5;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.getCountryIsoCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.CreateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.setCountryIsoCode = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string trunk_ref = 6;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.getTrunkRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.CreateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.setTrunkRef = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string agent_aor = 7;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.getAgentAor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.CreateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.setAgentAor = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.fonoster.numbers.v1beta2.CreateNumberRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.fonoster.numbers.v1beta2.CreateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.clearAgentAor = function() {
  return jspb.Message.setOneofField(this, 7, proto.fonoster.numbers.v1beta2.CreateNumberRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.hasAgentAor = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string app_ref = 8;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.getAppRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.CreateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.setAppRef = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.fonoster.numbers.v1beta2.CreateNumberRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.fonoster.numbers.v1beta2.CreateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.clearAppRef = function() {
  return jspb.Message.setOneofField(this, 8, proto.fonoster.numbers.v1beta2.CreateNumberRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.numbers.v1beta2.CreateNumberRequest.prototype.hasAppRef = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.numbers.v1beta2.CreateNumberResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.numbers.v1beta2.CreateNumberResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.numbers.v1beta2.CreateNumberResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.CreateNumberResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.numbers.v1beta2.CreateNumberResponse}
 */
proto.fonoster.numbers.v1beta2.CreateNumberResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.numbers.v1beta2.CreateNumberResponse;
  return proto.fonoster.numbers.v1beta2.CreateNumberResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.numbers.v1beta2.CreateNumberResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.numbers.v1beta2.CreateNumberResponse}
 */
proto.fonoster.numbers.v1beta2.CreateNumberResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.numbers.v1beta2.CreateNumberResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.numbers.v1beta2.CreateNumberResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.numbers.v1beta2.CreateNumberResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.CreateNumberResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.CreateNumberResponse.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.CreateNumberResponse} returns this
 */
proto.fonoster.numbers.v1beta2.CreateNumberResponse.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.oneofGroups_ = [[4,5]];

/**
 * @enum {number}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.IngressHandlerCase = {
  INGRESS_HANDLER_NOT_SET: 0,
  AGENT_AOR: 4,
  APP_REF: 5
};

/**
 * @return {proto.fonoster.numbers.v1beta2.UpdateNumberRequest.IngressHandlerCase}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.getIngressHandlerCase = function() {
  return /** @type {proto.fonoster.numbers.v1beta2.UpdateNumberRequest.IngressHandlerCase} */(jspb.Message.computeOneofCase(this, proto.fonoster.numbers.v1beta2.UpdateNumberRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.numbers.v1beta2.UpdateNumberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.numbers.v1beta2.UpdateNumberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
trunkRef: jspb.Message.getFieldWithDefault(msg, 3, ""),
agentAor: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
appRef: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.numbers.v1beta2.UpdateNumberRequest}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.numbers.v1beta2.UpdateNumberRequest;
  return proto.fonoster.numbers.v1beta2.UpdateNumberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.numbers.v1beta2.UpdateNumberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.numbers.v1beta2.UpdateNumberRequest}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrunkRef(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentAor(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.numbers.v1beta2.UpdateNumberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.numbers.v1beta2.UpdateNumberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTrunkRef();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.UpdateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.UpdateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string trunk_ref = 3;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.getTrunkRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.UpdateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.setTrunkRef = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string agent_aor = 4;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.getAgentAor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.UpdateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.setAgentAor = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.fonoster.numbers.v1beta2.UpdateNumberRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.fonoster.numbers.v1beta2.UpdateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.clearAgentAor = function() {
  return jspb.Message.setOneofField(this, 4, proto.fonoster.numbers.v1beta2.UpdateNumberRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.hasAgentAor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string app_ref = 5;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.getAppRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.UpdateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.setAppRef = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.fonoster.numbers.v1beta2.UpdateNumberRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.fonoster.numbers.v1beta2.UpdateNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.clearAppRef = function() {
  return jspb.Message.setOneofField(this, 5, proto.fonoster.numbers.v1beta2.UpdateNumberRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberRequest.prototype.hasAppRef = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.numbers.v1beta2.UpdateNumberResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.numbers.v1beta2.UpdateNumberResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.UpdateNumberResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.numbers.v1beta2.UpdateNumberResponse}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.numbers.v1beta2.UpdateNumberResponse;
  return proto.fonoster.numbers.v1beta2.UpdateNumberResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.numbers.v1beta2.UpdateNumberResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.numbers.v1beta2.UpdateNumberResponse}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.numbers.v1beta2.UpdateNumberResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.numbers.v1beta2.UpdateNumberResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.UpdateNumberResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.UpdateNumberResponse.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.UpdateNumberResponse} returns this
 */
proto.fonoster.numbers.v1beta2.UpdateNumberResponse.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.numbers.v1beta2.GetNumberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.numbers.v1beta2.GetNumberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.numbers.v1beta2.GetNumberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.GetNumberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.numbers.v1beta2.GetNumberRequest}
 */
proto.fonoster.numbers.v1beta2.GetNumberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.numbers.v1beta2.GetNumberRequest;
  return proto.fonoster.numbers.v1beta2.GetNumberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.numbers.v1beta2.GetNumberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.numbers.v1beta2.GetNumberRequest}
 */
proto.fonoster.numbers.v1beta2.GetNumberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.numbers.v1beta2.GetNumberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.numbers.v1beta2.GetNumberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.numbers.v1beta2.GetNumberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.GetNumberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.GetNumberRequest.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.GetNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.GetNumberRequest.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.numbers.v1beta2.DeleteNumberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.numbers.v1beta2.DeleteNumberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.numbers.v1beta2.DeleteNumberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.DeleteNumberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.numbers.v1beta2.DeleteNumberRequest}
 */
proto.fonoster.numbers.v1beta2.DeleteNumberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.numbers.v1beta2.DeleteNumberRequest;
  return proto.fonoster.numbers.v1beta2.DeleteNumberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.numbers.v1beta2.DeleteNumberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.numbers.v1beta2.DeleteNumberRequest}
 */
proto.fonoster.numbers.v1beta2.DeleteNumberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.numbers.v1beta2.DeleteNumberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.numbers.v1beta2.DeleteNumberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.numbers.v1beta2.DeleteNumberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.DeleteNumberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.DeleteNumberRequest.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.DeleteNumberRequest} returns this
 */
proto.fonoster.numbers.v1beta2.DeleteNumberRequest.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.numbers.v1beta2.DeleteNumberResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.numbers.v1beta2.DeleteNumberResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.numbers.v1beta2.DeleteNumberResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.DeleteNumberResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.numbers.v1beta2.DeleteNumberResponse}
 */
proto.fonoster.numbers.v1beta2.DeleteNumberResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.numbers.v1beta2.DeleteNumberResponse;
  return proto.fonoster.numbers.v1beta2.DeleteNumberResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.numbers.v1beta2.DeleteNumberResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.numbers.v1beta2.DeleteNumberResponse}
 */
proto.fonoster.numbers.v1beta2.DeleteNumberResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.numbers.v1beta2.DeleteNumberResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.numbers.v1beta2.DeleteNumberResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.numbers.v1beta2.DeleteNumberResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.DeleteNumberResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.DeleteNumberResponse.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.DeleteNumberResponse} returns this
 */
proto.fonoster.numbers.v1beta2.DeleteNumberResponse.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.numbers.v1beta2.ListNumbersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.numbers.v1beta2.ListNumbersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.numbers.v1beta2.ListNumbersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.ListNumbersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
pageSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
pageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.numbers.v1beta2.ListNumbersRequest}
 */
proto.fonoster.numbers.v1beta2.ListNumbersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.numbers.v1beta2.ListNumbersRequest;
  return proto.fonoster.numbers.v1beta2.ListNumbersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.numbers.v1beta2.ListNumbersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.numbers.v1beta2.ListNumbersRequest}
 */
proto.fonoster.numbers.v1beta2.ListNumbersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.numbers.v1beta2.ListNumbersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.numbers.v1beta2.ListNumbersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.numbers.v1beta2.ListNumbersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.ListNumbersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 page_size = 1;
 * @return {number}
 */
proto.fonoster.numbers.v1beta2.ListNumbersRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.numbers.v1beta2.ListNumbersRequest} returns this
 */
proto.fonoster.numbers.v1beta2.ListNumbersRequest.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string page_token = 2;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.ListNumbersRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.ListNumbersRequest} returns this
 */
proto.fonoster.numbers.v1beta2.ListNumbersRequest.prototype.setPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fonoster.numbers.v1beta2.ListNumbersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.numbers.v1beta2.ListNumbersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.numbers.v1beta2.ListNumbersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.numbers.v1beta2.ListNumbersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.ListNumbersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.fonoster.numbers.v1beta2.Number.toObject, includeInstance),
nextPageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.numbers.v1beta2.ListNumbersResponse}
 */
proto.fonoster.numbers.v1beta2.ListNumbersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.numbers.v1beta2.ListNumbersResponse;
  return proto.fonoster.numbers.v1beta2.ListNumbersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.numbers.v1beta2.ListNumbersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.numbers.v1beta2.ListNumbersResponse}
 */
proto.fonoster.numbers.v1beta2.ListNumbersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fonoster.numbers.v1beta2.Number;
      reader.readMessage(value,proto.fonoster.numbers.v1beta2.Number.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.numbers.v1beta2.ListNumbersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.numbers.v1beta2.ListNumbersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.numbers.v1beta2.ListNumbersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.numbers.v1beta2.ListNumbersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fonoster.numbers.v1beta2.Number.serializeBinaryToWriter
    );
  }
  f = message.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated Number items = 1;
 * @return {!Array<!proto.fonoster.numbers.v1beta2.Number>}
 */
proto.fonoster.numbers.v1beta2.ListNumbersResponse.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.fonoster.numbers.v1beta2.Number>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fonoster.numbers.v1beta2.Number, 1));
};


/**
 * @param {!Array<!proto.fonoster.numbers.v1beta2.Number>} value
 * @return {!proto.fonoster.numbers.v1beta2.ListNumbersResponse} returns this
*/
proto.fonoster.numbers.v1beta2.ListNumbersResponse.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fonoster.numbers.v1beta2.Number=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fonoster.numbers.v1beta2.Number}
 */
proto.fonoster.numbers.v1beta2.ListNumbersResponse.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fonoster.numbers.v1beta2.Number, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fonoster.numbers.v1beta2.ListNumbersResponse} returns this
 */
proto.fonoster.numbers.v1beta2.ListNumbersResponse.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * optional string next_page_token = 2;
 * @return {string}
 */
proto.fonoster.numbers.v1beta2.ListNumbersResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.numbers.v1beta2.ListNumbersResponse} returns this
 */
proto.fonoster.numbers.v1beta2.ListNumbersResponse.prototype.setNextPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.fonoster.numbers.v1beta2);
