/**
 * @fileoverview gRPC-Web generated client stub for fonoster.calls.v1beta2
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: calls.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as calls_pb from './calls_pb'; // proto import: "calls.proto"


export class CallsClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateCall = new grpcWeb.MethodDescriptor(
    '/fonoster.calls.v1beta2.Calls/CreateCall',
    grpcWeb.MethodType.UNARY,
    calls_pb.CreateCallRequest,
    calls_pb.CreateCallResponse,
    (request: calls_pb.CreateCallRequest) => {
      return request.serializeBinary();
    },
    calls_pb.CreateCallResponse.deserializeBinary
  );

  createCall(
    request: calls_pb.CreateCallRequest,
    metadata?: grpcWeb.Metadata | null): Promise<calls_pb.CreateCallResponse>;

  createCall(
    request: calls_pb.CreateCallRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: calls_pb.CreateCallResponse) => void): grpcWeb.ClientReadableStream<calls_pb.CreateCallResponse>;

  createCall(
    request: calls_pb.CreateCallRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: calls_pb.CreateCallResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/fonoster.calls.v1beta2.Calls/CreateCall',
        request,
        metadata || {},
        this.methodDescriptorCreateCall,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/fonoster.calls.v1beta2.Calls/CreateCall',
    request,
    metadata || {},
    this.methodDescriptorCreateCall);
  }

  methodDescriptorListCalls = new grpcWeb.MethodDescriptor(
    '/fonoster.calls.v1beta2.Calls/ListCalls',
    grpcWeb.MethodType.UNARY,
    calls_pb.ListCallsRequest,
    calls_pb.ListCallsResponse,
    (request: calls_pb.ListCallsRequest) => {
      return request.serializeBinary();
    },
    calls_pb.ListCallsResponse.deserializeBinary
  );

  listCalls(
    request: calls_pb.ListCallsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<calls_pb.ListCallsResponse>;

  listCalls(
    request: calls_pb.ListCallsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: calls_pb.ListCallsResponse) => void): grpcWeb.ClientReadableStream<calls_pb.ListCallsResponse>;

  listCalls(
    request: calls_pb.ListCallsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: calls_pb.ListCallsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/fonoster.calls.v1beta2.Calls/ListCalls',
        request,
        metadata || {},
        this.methodDescriptorListCalls,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/fonoster.calls.v1beta2.Calls/ListCalls',
    request,
    metadata || {},
    this.methodDescriptorListCalls);
  }

  methodDescriptorGetCall = new grpcWeb.MethodDescriptor(
    '/fonoster.calls.v1beta2.Calls/GetCall',
    grpcWeb.MethodType.UNARY,
    calls_pb.GetCallRequest,
    calls_pb.CallDetailRecord,
    (request: calls_pb.GetCallRequest) => {
      return request.serializeBinary();
    },
    calls_pb.CallDetailRecord.deserializeBinary
  );

  getCall(
    request: calls_pb.GetCallRequest,
    metadata?: grpcWeb.Metadata | null): Promise<calls_pb.CallDetailRecord>;

  getCall(
    request: calls_pb.GetCallRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: calls_pb.CallDetailRecord) => void): grpcWeb.ClientReadableStream<calls_pb.CallDetailRecord>;

  getCall(
    request: calls_pb.GetCallRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: calls_pb.CallDetailRecord) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/fonoster.calls.v1beta2.Calls/GetCall',
        request,
        metadata || {},
        this.methodDescriptorGetCall,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/fonoster.calls.v1beta2.Calls/GetCall',
    request,
    metadata || {},
    this.methodDescriptorGetCall);
  }

  methodDescriptorTrackCall = new grpcWeb.MethodDescriptor(
    '/fonoster.calls.v1beta2.Calls/TrackCall',
    grpcWeb.MethodType.SERVER_STREAMING,
    calls_pb.TrackCallRequest,
    calls_pb.TrackCallResponse,
    (request: calls_pb.TrackCallRequest) => {
      return request.serializeBinary();
    },
    calls_pb.TrackCallResponse.deserializeBinary
  );

  trackCall(
    request: calls_pb.TrackCallRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<calls_pb.TrackCallResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/fonoster.calls.v1beta2.Calls/TrackCall',
      request,
      metadata || {},
      this.methodDescriptorTrackCall);
  }

}

