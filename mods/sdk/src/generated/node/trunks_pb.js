// source: trunks.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.fonoster.trunks.v1beta2.CreateTrunkRequest', null, global);
goog.exportSymbol('proto.fonoster.trunks.v1beta2.CreateTrunkResponse', null, global);
goog.exportSymbol('proto.fonoster.trunks.v1beta2.DeleteTrunkRequest', null, global);
goog.exportSymbol('proto.fonoster.trunks.v1beta2.DeleteTrunkResponse', null, global);
goog.exportSymbol('proto.fonoster.trunks.v1beta2.GetTrunkRequest', null, global);
goog.exportSymbol('proto.fonoster.trunks.v1beta2.ListTrunksRequest', null, global);
goog.exportSymbol('proto.fonoster.trunks.v1beta2.ListTrunksResponse', null, global);
goog.exportSymbol('proto.fonoster.trunks.v1beta2.Trunk', null, global);
goog.exportSymbol('proto.fonoster.trunks.v1beta2.Trunk.Acl', null, global);
goog.exportSymbol('proto.fonoster.trunks.v1beta2.Trunk.Credentials', null, global);
goog.exportSymbol('proto.fonoster.trunks.v1beta2.TrunkURI', null, global);
goog.exportSymbol('proto.fonoster.trunks.v1beta2.UpdateTrunkRequest', null, global);
goog.exportSymbol('proto.fonoster.trunks.v1beta2.UpdateTrunkResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.trunks.v1beta2.TrunkURI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.trunks.v1beta2.TrunkURI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.trunks.v1beta2.TrunkURI.displayName = 'proto.fonoster.trunks.v1beta2.TrunkURI';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.trunks.v1beta2.Trunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fonoster.trunks.v1beta2.Trunk.repeatedFields_, null);
};
goog.inherits(proto.fonoster.trunks.v1beta2.Trunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.trunks.v1beta2.Trunk.displayName = 'proto.fonoster.trunks.v1beta2.Trunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fonoster.trunks.v1beta2.Trunk.Acl.repeatedFields_, null);
};
goog.inherits(proto.fonoster.trunks.v1beta2.Trunk.Acl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.trunks.v1beta2.Trunk.Acl.displayName = 'proto.fonoster.trunks.v1beta2.Trunk.Acl';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.trunks.v1beta2.Trunk.Credentials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.trunks.v1beta2.Trunk.Credentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.trunks.v1beta2.Trunk.Credentials.displayName = 'proto.fonoster.trunks.v1beta2.Trunk.Credentials';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fonoster.trunks.v1beta2.CreateTrunkRequest.repeatedFields_, null);
};
goog.inherits(proto.fonoster.trunks.v1beta2.CreateTrunkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.trunks.v1beta2.CreateTrunkRequest.displayName = 'proto.fonoster.trunks.v1beta2.CreateTrunkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.trunks.v1beta2.CreateTrunkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.trunks.v1beta2.CreateTrunkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.trunks.v1beta2.CreateTrunkResponse.displayName = 'proto.fonoster.trunks.v1beta2.CreateTrunkResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.repeatedFields_, null);
};
goog.inherits(proto.fonoster.trunks.v1beta2.UpdateTrunkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.displayName = 'proto.fonoster.trunks.v1beta2.UpdateTrunkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.trunks.v1beta2.UpdateTrunkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.trunks.v1beta2.UpdateTrunkResponse.displayName = 'proto.fonoster.trunks.v1beta2.UpdateTrunkResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.trunks.v1beta2.GetTrunkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.trunks.v1beta2.GetTrunkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.trunks.v1beta2.GetTrunkRequest.displayName = 'proto.fonoster.trunks.v1beta2.GetTrunkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.trunks.v1beta2.DeleteTrunkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.trunks.v1beta2.DeleteTrunkRequest.displayName = 'proto.fonoster.trunks.v1beta2.DeleteTrunkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.trunks.v1beta2.DeleteTrunkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.trunks.v1beta2.DeleteTrunkResponse.displayName = 'proto.fonoster.trunks.v1beta2.DeleteTrunkResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.trunks.v1beta2.ListTrunksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.trunks.v1beta2.ListTrunksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.trunks.v1beta2.ListTrunksRequest.displayName = 'proto.fonoster.trunks.v1beta2.ListTrunksRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.trunks.v1beta2.ListTrunksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fonoster.trunks.v1beta2.ListTrunksResponse.repeatedFields_, null);
};
goog.inherits(proto.fonoster.trunks.v1beta2.ListTrunksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.trunks.v1beta2.ListTrunksResponse.displayName = 'proto.fonoster.trunks.v1beta2.ListTrunksResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.trunks.v1beta2.TrunkURI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.trunks.v1beta2.TrunkURI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.TrunkURI.toObject = function(includeInstance, msg) {
  var f, obj = {
host: jspb.Message.getFieldWithDefault(msg, 1, ""),
port: jspb.Message.getFieldWithDefault(msg, 2, 0),
transport: jspb.Message.getFieldWithDefault(msg, 3, ""),
user: jspb.Message.getFieldWithDefault(msg, 4, ""),
weight: jspb.Message.getFieldWithDefault(msg, 5, 0),
priority: jspb.Message.getFieldWithDefault(msg, 6, 0),
enabled: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.trunks.v1beta2.TrunkURI}
 */
proto.fonoster.trunks.v1beta2.TrunkURI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.trunks.v1beta2.TrunkURI;
  return proto.fonoster.trunks.v1beta2.TrunkURI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.trunks.v1beta2.TrunkURI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.trunks.v1beta2.TrunkURI}
 */
proto.fonoster.trunks.v1beta2.TrunkURI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransport(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWeight(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPriority(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.trunks.v1beta2.TrunkURI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.trunks.v1beta2.TrunkURI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.TrunkURI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTransport();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.TrunkURI} returns this
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.trunks.v1beta2.TrunkURI} returns this
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string transport = 3;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.getTransport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.TrunkURI} returns this
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.setTransport = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string user = 4;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.TrunkURI} returns this
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.setUser = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 weight = 5;
 * @return {number}
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.trunks.v1beta2.TrunkURI} returns this
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.setWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 priority = 6;
 * @return {number}
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.trunks.v1beta2.TrunkURI} returns this
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.setPriority = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool enabled = 7;
 * @return {boolean}
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.fonoster.trunks.v1beta2.TrunkURI} returns this
 */
proto.fonoster.trunks.v1beta2.TrunkURI.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fonoster.trunks.v1beta2.Trunk.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.trunks.v1beta2.Trunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.trunks.v1beta2.Trunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.Trunk.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
sendRegister: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
inboundUri: jspb.Message.getFieldWithDefault(msg, 4, ""),
createdAt: jspb.Message.getFieldWithDefault(msg, 5, 0),
updatedAt: jspb.Message.getFieldWithDefault(msg, 6, 0),
accessControlList: (f = msg.getAccessControlList()) && proto.fonoster.trunks.v1beta2.Trunk.Acl.toObject(includeInstance, f),
inboundCredentials: (f = msg.getInboundCredentials()) && proto.fonoster.trunks.v1beta2.Trunk.Credentials.toObject(includeInstance, f),
outboundCredentials: (f = msg.getOutboundCredentials()) && proto.fonoster.trunks.v1beta2.Trunk.Credentials.toObject(includeInstance, f),
urisList: jspb.Message.toObjectList(msg.getUrisList(),
    proto.fonoster.trunks.v1beta2.TrunkURI.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.trunks.v1beta2.Trunk}
 */
proto.fonoster.trunks.v1beta2.Trunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.trunks.v1beta2.Trunk;
  return proto.fonoster.trunks.v1beta2.Trunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.trunks.v1beta2.Trunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.trunks.v1beta2.Trunk}
 */
proto.fonoster.trunks.v1beta2.Trunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendRegister(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInboundUri(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreatedAt(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpdatedAt(value);
      break;
    case 7:
      var value = new proto.fonoster.trunks.v1beta2.Trunk.Acl;
      reader.readMessage(value,proto.fonoster.trunks.v1beta2.Trunk.Acl.deserializeBinaryFromReader);
      msg.setAccessControlList(value);
      break;
    case 8:
      var value = new proto.fonoster.trunks.v1beta2.Trunk.Credentials;
      reader.readMessage(value,proto.fonoster.trunks.v1beta2.Trunk.Credentials.deserializeBinaryFromReader);
      msg.setInboundCredentials(value);
      break;
    case 9:
      var value = new proto.fonoster.trunks.v1beta2.Trunk.Credentials;
      reader.readMessage(value,proto.fonoster.trunks.v1beta2.Trunk.Credentials.deserializeBinaryFromReader);
      msg.setOutboundCredentials(value);
      break;
    case 10:
      var value = new proto.fonoster.trunks.v1beta2.TrunkURI;
      reader.readMessage(value,proto.fonoster.trunks.v1beta2.TrunkURI.deserializeBinaryFromReader);
      msg.addUris(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.trunks.v1beta2.Trunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.trunks.v1beta2.Trunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.Trunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSendRegister();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getInboundUri();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAccessControlList();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.fonoster.trunks.v1beta2.Trunk.Acl.serializeBinaryToWriter
    );
  }
  f = message.getInboundCredentials();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.fonoster.trunks.v1beta2.Trunk.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getOutboundCredentials();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.fonoster.trunks.v1beta2.Trunk.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getUrisList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.fonoster.trunks.v1beta2.TrunkURI.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.trunks.v1beta2.Trunk.Acl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.trunks.v1beta2.Trunk.Acl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
allowList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
denyList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.trunks.v1beta2.Trunk.Acl}
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.trunks.v1beta2.Trunk.Acl;
  return proto.fonoster.trunks.v1beta2.Trunk.Acl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.trunks.v1beta2.Trunk.Acl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.trunks.v1beta2.Trunk.Acl}
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllow(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addDeny(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.trunks.v1beta2.Trunk.Acl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.trunks.v1beta2.Trunk.Acl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAllowList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getDenyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk.Acl} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk.Acl} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string allow = 3;
 * @return {!Array<string>}
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.prototype.getAllowList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk.Acl} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.prototype.setAllowList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.fonoster.trunks.v1beta2.Trunk.Acl} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.prototype.addAllow = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fonoster.trunks.v1beta2.Trunk.Acl} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.prototype.clearAllowList = function() {
  return this.setAllowList([]);
};


/**
 * repeated string deny = 4;
 * @return {!Array<string>}
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.prototype.getDenyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk.Acl} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.prototype.setDenyList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.fonoster.trunks.v1beta2.Trunk.Acl} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.prototype.addDeny = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fonoster.trunks.v1beta2.Trunk.Acl} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.Acl.prototype.clearDenyList = function() {
  return this.setDenyList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.trunks.v1beta2.Trunk.Credentials.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.trunks.v1beta2.Trunk.Credentials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.trunks.v1beta2.Trunk.Credentials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.Trunk.Credentials.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
username: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.trunks.v1beta2.Trunk.Credentials}
 */
proto.fonoster.trunks.v1beta2.Trunk.Credentials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.trunks.v1beta2.Trunk.Credentials;
  return proto.fonoster.trunks.v1beta2.Trunk.Credentials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.trunks.v1beta2.Trunk.Credentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.trunks.v1beta2.Trunk.Credentials}
 */
proto.fonoster.trunks.v1beta2.Trunk.Credentials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.trunks.v1beta2.Trunk.Credentials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.trunks.v1beta2.Trunk.Credentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.trunks.v1beta2.Trunk.Credentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.Trunk.Credentials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.Trunk.Credentials.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk.Credentials} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.Credentials.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.Trunk.Credentials.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk.Credentials} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.Credentials.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.Trunk.Credentials.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk.Credentials} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.Credentials.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool send_register = 3;
 * @return {boolean}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.getSendRegister = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.setSendRegister = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string inbound_uri = 4;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.getInboundUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.setInboundUri = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 created_at = 5;
 * @return {number}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 updated_at = 6;
 * @return {number}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional Acl access_control_list = 7;
 * @return {?proto.fonoster.trunks.v1beta2.Trunk.Acl}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.getAccessControlList = function() {
  return /** @type{?proto.fonoster.trunks.v1beta2.Trunk.Acl} */ (
    jspb.Message.getWrapperField(this, proto.fonoster.trunks.v1beta2.Trunk.Acl, 7));
};


/**
 * @param {?proto.fonoster.trunks.v1beta2.Trunk.Acl|undefined} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk} returns this
*/
proto.fonoster.trunks.v1beta2.Trunk.prototype.setAccessControlList = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fonoster.trunks.v1beta2.Trunk} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.clearAccessControlList = function() {
  return this.setAccessControlList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.hasAccessControlList = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Credentials inbound_credentials = 8;
 * @return {?proto.fonoster.trunks.v1beta2.Trunk.Credentials}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.getInboundCredentials = function() {
  return /** @type{?proto.fonoster.trunks.v1beta2.Trunk.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.fonoster.trunks.v1beta2.Trunk.Credentials, 8));
};


/**
 * @param {?proto.fonoster.trunks.v1beta2.Trunk.Credentials|undefined} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk} returns this
*/
proto.fonoster.trunks.v1beta2.Trunk.prototype.setInboundCredentials = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fonoster.trunks.v1beta2.Trunk} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.clearInboundCredentials = function() {
  return this.setInboundCredentials(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.hasInboundCredentials = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Credentials outbound_credentials = 9;
 * @return {?proto.fonoster.trunks.v1beta2.Trunk.Credentials}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.getOutboundCredentials = function() {
  return /** @type{?proto.fonoster.trunks.v1beta2.Trunk.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.fonoster.trunks.v1beta2.Trunk.Credentials, 9));
};


/**
 * @param {?proto.fonoster.trunks.v1beta2.Trunk.Credentials|undefined} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk} returns this
*/
proto.fonoster.trunks.v1beta2.Trunk.prototype.setOutboundCredentials = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fonoster.trunks.v1beta2.Trunk} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.clearOutboundCredentials = function() {
  return this.setOutboundCredentials(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.hasOutboundCredentials = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated TrunkURI uris = 10;
 * @return {!Array<!proto.fonoster.trunks.v1beta2.TrunkURI>}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.getUrisList = function() {
  return /** @type{!Array<!proto.fonoster.trunks.v1beta2.TrunkURI>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fonoster.trunks.v1beta2.TrunkURI, 10));
};


/**
 * @param {!Array<!proto.fonoster.trunks.v1beta2.TrunkURI>} value
 * @return {!proto.fonoster.trunks.v1beta2.Trunk} returns this
*/
proto.fonoster.trunks.v1beta2.Trunk.prototype.setUrisList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.fonoster.trunks.v1beta2.TrunkURI=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fonoster.trunks.v1beta2.TrunkURI}
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.addUris = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.fonoster.trunks.v1beta2.TrunkURI, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fonoster.trunks.v1beta2.Trunk} returns this
 */
proto.fonoster.trunks.v1beta2.Trunk.prototype.clearUrisList = function() {
  return this.setUrisList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.trunks.v1beta2.CreateTrunkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.trunks.v1beta2.CreateTrunkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
sendRegister: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
inboundUri: jspb.Message.getFieldWithDefault(msg, 3, ""),
accessControlListRef: jspb.Message.getFieldWithDefault(msg, 4, ""),
inboundCredentialsRef: jspb.Message.getFieldWithDefault(msg, 5, ""),
outboundCredentialsRef: jspb.Message.getFieldWithDefault(msg, 6, ""),
urisList: jspb.Message.toObjectList(msg.getUrisList(),
    proto.fonoster.trunks.v1beta2.TrunkURI.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.trunks.v1beta2.CreateTrunkRequest}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.trunks.v1beta2.CreateTrunkRequest;
  return proto.fonoster.trunks.v1beta2.CreateTrunkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.trunks.v1beta2.CreateTrunkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.trunks.v1beta2.CreateTrunkRequest}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendRegister(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInboundUri(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessControlListRef(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInboundCredentialsRef(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutboundCredentialsRef(value);
      break;
    case 7:
      var value = new proto.fonoster.trunks.v1beta2.TrunkURI;
      reader.readMessage(value,proto.fonoster.trunks.v1beta2.TrunkURI.deserializeBinaryFromReader);
      msg.addUris(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.trunks.v1beta2.CreateTrunkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.trunks.v1beta2.CreateTrunkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSendRegister();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getInboundUri();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAccessControlListRef();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInboundCredentialsRef();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOutboundCredentialsRef();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUrisList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.fonoster.trunks.v1beta2.TrunkURI.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.CreateTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool send_register = 2;
 * @return {boolean}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.getSendRegister = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.fonoster.trunks.v1beta2.CreateTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.setSendRegister = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string inbound_uri = 3;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.getInboundUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.CreateTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.setInboundUri = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string access_control_list_ref = 4;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.getAccessControlListRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.CreateTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.setAccessControlListRef = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string inbound_credentials_ref = 5;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.getInboundCredentialsRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.CreateTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.setInboundCredentialsRef = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string outbound_credentials_ref = 6;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.getOutboundCredentialsRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.CreateTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.setOutboundCredentialsRef = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated TrunkURI uris = 7;
 * @return {!Array<!proto.fonoster.trunks.v1beta2.TrunkURI>}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.getUrisList = function() {
  return /** @type{!Array<!proto.fonoster.trunks.v1beta2.TrunkURI>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fonoster.trunks.v1beta2.TrunkURI, 7));
};


/**
 * @param {!Array<!proto.fonoster.trunks.v1beta2.TrunkURI>} value
 * @return {!proto.fonoster.trunks.v1beta2.CreateTrunkRequest} returns this
*/
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.setUrisList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.fonoster.trunks.v1beta2.TrunkURI=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fonoster.trunks.v1beta2.TrunkURI}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.addUris = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.fonoster.trunks.v1beta2.TrunkURI, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fonoster.trunks.v1beta2.CreateTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.CreateTrunkRequest.prototype.clearUrisList = function() {
  return this.setUrisList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.trunks.v1beta2.CreateTrunkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.trunks.v1beta2.CreateTrunkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.CreateTrunkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.trunks.v1beta2.CreateTrunkResponse}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.trunks.v1beta2.CreateTrunkResponse;
  return proto.fonoster.trunks.v1beta2.CreateTrunkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.trunks.v1beta2.CreateTrunkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.trunks.v1beta2.CreateTrunkResponse}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.trunks.v1beta2.CreateTrunkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.trunks.v1beta2.CreateTrunkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.CreateTrunkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.CreateTrunkResponse.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.CreateTrunkResponse} returns this
 */
proto.fonoster.trunks.v1beta2.CreateTrunkResponse.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.trunks.v1beta2.UpdateTrunkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
sendRegister: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
inboundUri: jspb.Message.getFieldWithDefault(msg, 4, ""),
accessControlListRef: jspb.Message.getFieldWithDefault(msg, 5, ""),
inboundCredentialsRef: jspb.Message.getFieldWithDefault(msg, 6, ""),
outboundCredentialsRef: jspb.Message.getFieldWithDefault(msg, 7, ""),
urisList: jspb.Message.toObjectList(msg.getUrisList(),
    proto.fonoster.trunks.v1beta2.TrunkURI.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.trunks.v1beta2.UpdateTrunkRequest}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.trunks.v1beta2.UpdateTrunkRequest;
  return proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.trunks.v1beta2.UpdateTrunkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.trunks.v1beta2.UpdateTrunkRequest}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendRegister(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInboundUri(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessControlListRef(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setInboundCredentialsRef(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutboundCredentialsRef(value);
      break;
    case 8:
      var value = new proto.fonoster.trunks.v1beta2.TrunkURI;
      reader.readMessage(value,proto.fonoster.trunks.v1beta2.TrunkURI.deserializeBinaryFromReader);
      msg.addUris(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.trunks.v1beta2.UpdateTrunkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSendRegister();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getInboundUri();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAccessControlListRef();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getInboundCredentialsRef();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOutboundCredentialsRef();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUrisList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.fonoster.trunks.v1beta2.TrunkURI.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.UpdateTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.UpdateTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool send_register = 3;
 * @return {boolean}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.getSendRegister = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.fonoster.trunks.v1beta2.UpdateTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.setSendRegister = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string inbound_uri = 4;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.getInboundUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.UpdateTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.setInboundUri = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string access_control_list_ref = 5;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.getAccessControlListRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.UpdateTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.setAccessControlListRef = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string inbound_credentials_ref = 6;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.getInboundCredentialsRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.UpdateTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.setInboundCredentialsRef = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string outbound_credentials_ref = 7;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.getOutboundCredentialsRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.UpdateTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.setOutboundCredentialsRef = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated TrunkURI uris = 8;
 * @return {!Array<!proto.fonoster.trunks.v1beta2.TrunkURI>}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.getUrisList = function() {
  return /** @type{!Array<!proto.fonoster.trunks.v1beta2.TrunkURI>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fonoster.trunks.v1beta2.TrunkURI, 8));
};


/**
 * @param {!Array<!proto.fonoster.trunks.v1beta2.TrunkURI>} value
 * @return {!proto.fonoster.trunks.v1beta2.UpdateTrunkRequest} returns this
*/
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.setUrisList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.fonoster.trunks.v1beta2.TrunkURI=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fonoster.trunks.v1beta2.TrunkURI}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.addUris = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.fonoster.trunks.v1beta2.TrunkURI, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fonoster.trunks.v1beta2.UpdateTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkRequest.prototype.clearUrisList = function() {
  return this.setUrisList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.trunks.v1beta2.UpdateTrunkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.trunks.v1beta2.UpdateTrunkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.trunks.v1beta2.UpdateTrunkResponse}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.trunks.v1beta2.UpdateTrunkResponse;
  return proto.fonoster.trunks.v1beta2.UpdateTrunkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.trunks.v1beta2.UpdateTrunkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.trunks.v1beta2.UpdateTrunkResponse}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.trunks.v1beta2.UpdateTrunkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.trunks.v1beta2.UpdateTrunkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkResponse.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.UpdateTrunkResponse} returns this
 */
proto.fonoster.trunks.v1beta2.UpdateTrunkResponse.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.trunks.v1beta2.GetTrunkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.trunks.v1beta2.GetTrunkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.trunks.v1beta2.GetTrunkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.GetTrunkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.trunks.v1beta2.GetTrunkRequest}
 */
proto.fonoster.trunks.v1beta2.GetTrunkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.trunks.v1beta2.GetTrunkRequest;
  return proto.fonoster.trunks.v1beta2.GetTrunkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.trunks.v1beta2.GetTrunkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.trunks.v1beta2.GetTrunkRequest}
 */
proto.fonoster.trunks.v1beta2.GetTrunkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.trunks.v1beta2.GetTrunkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.trunks.v1beta2.GetTrunkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.trunks.v1beta2.GetTrunkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.GetTrunkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.GetTrunkRequest.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.GetTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.GetTrunkRequest.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.trunks.v1beta2.DeleteTrunkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.trunks.v1beta2.DeleteTrunkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.trunks.v1beta2.DeleteTrunkRequest}
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.trunks.v1beta2.DeleteTrunkRequest;
  return proto.fonoster.trunks.v1beta2.DeleteTrunkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.trunks.v1beta2.DeleteTrunkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.trunks.v1beta2.DeleteTrunkRequest}
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.trunks.v1beta2.DeleteTrunkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.trunks.v1beta2.DeleteTrunkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkRequest.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.DeleteTrunkRequest} returns this
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkRequest.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.trunks.v1beta2.DeleteTrunkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.trunks.v1beta2.DeleteTrunkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.trunks.v1beta2.DeleteTrunkResponse}
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.trunks.v1beta2.DeleteTrunkResponse;
  return proto.fonoster.trunks.v1beta2.DeleteTrunkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.trunks.v1beta2.DeleteTrunkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.trunks.v1beta2.DeleteTrunkResponse}
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.trunks.v1beta2.DeleteTrunkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.trunks.v1beta2.DeleteTrunkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkResponse.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.DeleteTrunkResponse} returns this
 */
proto.fonoster.trunks.v1beta2.DeleteTrunkResponse.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.trunks.v1beta2.ListTrunksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.trunks.v1beta2.ListTrunksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.trunks.v1beta2.ListTrunksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.ListTrunksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
pageSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
pageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.trunks.v1beta2.ListTrunksRequest}
 */
proto.fonoster.trunks.v1beta2.ListTrunksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.trunks.v1beta2.ListTrunksRequest;
  return proto.fonoster.trunks.v1beta2.ListTrunksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.trunks.v1beta2.ListTrunksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.trunks.v1beta2.ListTrunksRequest}
 */
proto.fonoster.trunks.v1beta2.ListTrunksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.trunks.v1beta2.ListTrunksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.trunks.v1beta2.ListTrunksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.trunks.v1beta2.ListTrunksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.ListTrunksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 page_size = 1;
 * @return {number}
 */
proto.fonoster.trunks.v1beta2.ListTrunksRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.trunks.v1beta2.ListTrunksRequest} returns this
 */
proto.fonoster.trunks.v1beta2.ListTrunksRequest.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string page_token = 2;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.ListTrunksRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.ListTrunksRequest} returns this
 */
proto.fonoster.trunks.v1beta2.ListTrunksRequest.prototype.setPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fonoster.trunks.v1beta2.ListTrunksResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.trunks.v1beta2.ListTrunksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.trunks.v1beta2.ListTrunksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.trunks.v1beta2.ListTrunksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.ListTrunksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.fonoster.trunks.v1beta2.Trunk.toObject, includeInstance),
nextPageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.trunks.v1beta2.ListTrunksResponse}
 */
proto.fonoster.trunks.v1beta2.ListTrunksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.trunks.v1beta2.ListTrunksResponse;
  return proto.fonoster.trunks.v1beta2.ListTrunksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.trunks.v1beta2.ListTrunksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.trunks.v1beta2.ListTrunksResponse}
 */
proto.fonoster.trunks.v1beta2.ListTrunksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fonoster.trunks.v1beta2.Trunk;
      reader.readMessage(value,proto.fonoster.trunks.v1beta2.Trunk.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.trunks.v1beta2.ListTrunksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.trunks.v1beta2.ListTrunksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.trunks.v1beta2.ListTrunksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.trunks.v1beta2.ListTrunksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fonoster.trunks.v1beta2.Trunk.serializeBinaryToWriter
    );
  }
  f = message.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated Trunk items = 1;
 * @return {!Array<!proto.fonoster.trunks.v1beta2.Trunk>}
 */
proto.fonoster.trunks.v1beta2.ListTrunksResponse.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.fonoster.trunks.v1beta2.Trunk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fonoster.trunks.v1beta2.Trunk, 1));
};


/**
 * @param {!Array<!proto.fonoster.trunks.v1beta2.Trunk>} value
 * @return {!proto.fonoster.trunks.v1beta2.ListTrunksResponse} returns this
*/
proto.fonoster.trunks.v1beta2.ListTrunksResponse.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fonoster.trunks.v1beta2.Trunk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fonoster.trunks.v1beta2.Trunk}
 */
proto.fonoster.trunks.v1beta2.ListTrunksResponse.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fonoster.trunks.v1beta2.Trunk, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fonoster.trunks.v1beta2.ListTrunksResponse} returns this
 */
proto.fonoster.trunks.v1beta2.ListTrunksResponse.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * optional string next_page_token = 2;
 * @return {string}
 */
proto.fonoster.trunks.v1beta2.ListTrunksResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.trunks.v1beta2.ListTrunksResponse} returns this
 */
proto.fonoster.trunks.v1beta2.ListTrunksResponse.prototype.setNextPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.fonoster.trunks.v1beta2);
