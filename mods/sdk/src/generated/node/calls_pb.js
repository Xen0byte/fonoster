// source: calls.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.fonoster.calls.v1beta2.CallDetailRecord', null, global);
goog.exportSymbol('proto.fonoster.calls.v1beta2.CallDirection', null, global);
goog.exportSymbol('proto.fonoster.calls.v1beta2.CallStatus', null, global);
goog.exportSymbol('proto.fonoster.calls.v1beta2.CallType', null, global);
goog.exportSymbol('proto.fonoster.calls.v1beta2.CreateCallRequest', null, global);
goog.exportSymbol('proto.fonoster.calls.v1beta2.CreateCallResponse', null, global);
goog.exportSymbol('proto.fonoster.calls.v1beta2.GetCallRequest', null, global);
goog.exportSymbol('proto.fonoster.calls.v1beta2.ListCallsRequest', null, global);
goog.exportSymbol('proto.fonoster.calls.v1beta2.ListCallsResponse', null, global);
goog.exportSymbol('proto.fonoster.calls.v1beta2.TrackCallRequest', null, global);
goog.exportSymbol('proto.fonoster.calls.v1beta2.TrackCallResponse', null, global);
goog.exportSymbol('proto.fonoster.calls.v1beta2.TrackCallResponse.Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.calls.v1beta2.CallDetailRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.calls.v1beta2.CallDetailRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.calls.v1beta2.CallDetailRecord.displayName = 'proto.fonoster.calls.v1beta2.CallDetailRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.calls.v1beta2.CreateCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.calls.v1beta2.CreateCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.calls.v1beta2.CreateCallRequest.displayName = 'proto.fonoster.calls.v1beta2.CreateCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.calls.v1beta2.CreateCallResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.calls.v1beta2.CreateCallResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.calls.v1beta2.CreateCallResponse.displayName = 'proto.fonoster.calls.v1beta2.CreateCallResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.calls.v1beta2.ListCallsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.calls.v1beta2.ListCallsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.calls.v1beta2.ListCallsRequest.displayName = 'proto.fonoster.calls.v1beta2.ListCallsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.calls.v1beta2.ListCallsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fonoster.calls.v1beta2.ListCallsResponse.repeatedFields_, null);
};
goog.inherits(proto.fonoster.calls.v1beta2.ListCallsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.calls.v1beta2.ListCallsResponse.displayName = 'proto.fonoster.calls.v1beta2.ListCallsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.calls.v1beta2.GetCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.calls.v1beta2.GetCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.calls.v1beta2.GetCallRequest.displayName = 'proto.fonoster.calls.v1beta2.GetCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.calls.v1beta2.TrackCallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.calls.v1beta2.TrackCallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.calls.v1beta2.TrackCallRequest.displayName = 'proto.fonoster.calls.v1beta2.TrackCallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.calls.v1beta2.TrackCallResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.calls.v1beta2.TrackCallResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.calls.v1beta2.TrackCallResponse.displayName = 'proto.fonoster.calls.v1beta2.TrackCallResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.calls.v1beta2.CallDetailRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.calls.v1beta2.CallDetailRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, ""),
callId: jspb.Message.getFieldWithDefault(msg, 2, ""),
type: jspb.Message.getFieldWithDefault(msg, 3, 0),
status: jspb.Message.getFieldWithDefault(msg, 4, 0),
startedAt: jspb.Message.getFieldWithDefault(msg, 5, 0),
endedAt: jspb.Message.getFieldWithDefault(msg, 6, 0),
from: jspb.Message.getFieldWithDefault(msg, 7, ""),
to: jspb.Message.getFieldWithDefault(msg, 8, ""),
duration: jspb.Message.getFieldWithDefault(msg, 9, 0),
direction: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.calls.v1beta2.CallDetailRecord}
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.calls.v1beta2.CallDetailRecord;
  return proto.fonoster.calls.v1beta2.CallDetailRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.calls.v1beta2.CallDetailRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.calls.v1beta2.CallDetailRecord}
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallId(value);
      break;
    case 3:
      var value = /** @type {!proto.fonoster.calls.v1beta2.CallType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {!proto.fonoster.calls.v1beta2.CallStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartedAt(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndedAt(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuration(value);
      break;
    case 10:
      var value = /** @type {!proto.fonoster.calls.v1beta2.CallDirection} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.calls.v1beta2.CallDetailRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.calls.v1beta2.CallDetailRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCallId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getStartedAt();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getEndedAt();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.CallDetailRecord} returns this
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string call_id = 2;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.getCallId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.CallDetailRecord} returns this
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.setCallId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional CallType type = 3;
 * @return {!proto.fonoster.calls.v1beta2.CallType}
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.getType = function() {
  return /** @type {!proto.fonoster.calls.v1beta2.CallType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.fonoster.calls.v1beta2.CallType} value
 * @return {!proto.fonoster.calls.v1beta2.CallDetailRecord} returns this
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional CallStatus status = 4;
 * @return {!proto.fonoster.calls.v1beta2.CallStatus}
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.getStatus = function() {
  return /** @type {!proto.fonoster.calls.v1beta2.CallStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.fonoster.calls.v1beta2.CallStatus} value
 * @return {!proto.fonoster.calls.v1beta2.CallDetailRecord} returns this
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 started_at = 5;
 * @return {number}
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.getStartedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.calls.v1beta2.CallDetailRecord} returns this
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.setStartedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 ended_at = 6;
 * @return {number}
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.getEndedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.calls.v1beta2.CallDetailRecord} returns this
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.setEndedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string from = 7;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.CallDetailRecord} returns this
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string to = 8;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.CallDetailRecord} returns this
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 duration = 9;
 * @return {number}
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.calls.v1beta2.CallDetailRecord} returns this
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional CallDirection direction = 10;
 * @return {!proto.fonoster.calls.v1beta2.CallDirection}
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.getDirection = function() {
  return /** @type {!proto.fonoster.calls.v1beta2.CallDirection} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.fonoster.calls.v1beta2.CallDirection} value
 * @return {!proto.fonoster.calls.v1beta2.CallDetailRecord} returns this
 */
proto.fonoster.calls.v1beta2.CallDetailRecord.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.calls.v1beta2.CreateCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.calls.v1beta2.CreateCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.calls.v1beta2.CreateCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.CreateCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
from: jspb.Message.getFieldWithDefault(msg, 1, ""),
to: jspb.Message.getFieldWithDefault(msg, 2, ""),
appRef: jspb.Message.getFieldWithDefault(msg, 3, ""),
timeout: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.calls.v1beta2.CreateCallRequest}
 */
proto.fonoster.calls.v1beta2.CreateCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.calls.v1beta2.CreateCallRequest;
  return proto.fonoster.calls.v1beta2.CreateCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.calls.v1beta2.CreateCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.calls.v1beta2.CreateCallRequest}
 */
proto.fonoster.calls.v1beta2.CreateCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppRef(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.calls.v1beta2.CreateCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.calls.v1beta2.CreateCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.calls.v1beta2.CreateCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.CreateCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAppRef();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.CreateCallRequest.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.CreateCallRequest} returns this
 */
proto.fonoster.calls.v1beta2.CreateCallRequest.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.CreateCallRequest.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.CreateCallRequest} returns this
 */
proto.fonoster.calls.v1beta2.CreateCallRequest.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string app_ref = 3;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.CreateCallRequest.prototype.getAppRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.CreateCallRequest} returns this
 */
proto.fonoster.calls.v1beta2.CreateCallRequest.prototype.setAppRef = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 timeout = 4;
 * @return {number}
 */
proto.fonoster.calls.v1beta2.CreateCallRequest.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.calls.v1beta2.CreateCallRequest} returns this
 */
proto.fonoster.calls.v1beta2.CreateCallRequest.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.calls.v1beta2.CreateCallResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.calls.v1beta2.CreateCallResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.calls.v1beta2.CreateCallResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.CreateCallResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.calls.v1beta2.CreateCallResponse}
 */
proto.fonoster.calls.v1beta2.CreateCallResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.calls.v1beta2.CreateCallResponse;
  return proto.fonoster.calls.v1beta2.CreateCallResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.calls.v1beta2.CreateCallResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.calls.v1beta2.CreateCallResponse}
 */
proto.fonoster.calls.v1beta2.CreateCallResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.calls.v1beta2.CreateCallResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.calls.v1beta2.CreateCallResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.calls.v1beta2.CreateCallResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.CreateCallResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.CreateCallResponse.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.CreateCallResponse} returns this
 */
proto.fonoster.calls.v1beta2.CreateCallResponse.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.calls.v1beta2.ListCallsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.calls.v1beta2.ListCallsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
after: jspb.Message.getFieldWithDefault(msg, 1, ""),
before: jspb.Message.getFieldWithDefault(msg, 2, ""),
type: jspb.Message.getFieldWithDefault(msg, 3, 0),
status: jspb.Message.getFieldWithDefault(msg, 4, 0),
from: jspb.Message.getFieldWithDefault(msg, 5, ""),
to: jspb.Message.getFieldWithDefault(msg, 6, ""),
pageSize: jspb.Message.getFieldWithDefault(msg, 7, 0),
pageToken: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.calls.v1beta2.ListCallsRequest}
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.calls.v1beta2.ListCallsRequest;
  return proto.fonoster.calls.v1beta2.ListCallsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.calls.v1beta2.ListCallsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.calls.v1beta2.ListCallsRequest}
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAfter(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBefore(value);
      break;
    case 3:
      var value = /** @type {!proto.fonoster.calls.v1beta2.CallType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {!proto.fonoster.calls.v1beta2.CallStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.calls.v1beta2.ListCallsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.calls.v1beta2.ListCallsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAfter();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBefore();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string after = 1;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.getAfter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.ListCallsRequest} returns this
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.setAfter = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string before = 2;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.getBefore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.ListCallsRequest} returns this
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.setBefore = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional CallType type = 3;
 * @return {!proto.fonoster.calls.v1beta2.CallType}
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.getType = function() {
  return /** @type {!proto.fonoster.calls.v1beta2.CallType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.fonoster.calls.v1beta2.CallType} value
 * @return {!proto.fonoster.calls.v1beta2.ListCallsRequest} returns this
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional CallStatus status = 4;
 * @return {!proto.fonoster.calls.v1beta2.CallStatus}
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.getStatus = function() {
  return /** @type {!proto.fonoster.calls.v1beta2.CallStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.fonoster.calls.v1beta2.CallStatus} value
 * @return {!proto.fonoster.calls.v1beta2.ListCallsRequest} returns this
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string from = 5;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.ListCallsRequest} returns this
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string to = 6;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.ListCallsRequest} returns this
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 page_size = 7;
 * @return {number}
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.calls.v1beta2.ListCallsRequest} returns this
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string page_token = 8;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.ListCallsRequest} returns this
 */
proto.fonoster.calls.v1beta2.ListCallsRequest.prototype.setPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fonoster.calls.v1beta2.ListCallsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.calls.v1beta2.ListCallsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.calls.v1beta2.ListCallsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.calls.v1beta2.ListCallsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.ListCallsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.fonoster.calls.v1beta2.CallDetailRecord.toObject, includeInstance),
nextPageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.calls.v1beta2.ListCallsResponse}
 */
proto.fonoster.calls.v1beta2.ListCallsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.calls.v1beta2.ListCallsResponse;
  return proto.fonoster.calls.v1beta2.ListCallsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.calls.v1beta2.ListCallsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.calls.v1beta2.ListCallsResponse}
 */
proto.fonoster.calls.v1beta2.ListCallsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fonoster.calls.v1beta2.CallDetailRecord;
      reader.readMessage(value,proto.fonoster.calls.v1beta2.CallDetailRecord.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.calls.v1beta2.ListCallsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.calls.v1beta2.ListCallsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.calls.v1beta2.ListCallsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.ListCallsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fonoster.calls.v1beta2.CallDetailRecord.serializeBinaryToWriter
    );
  }
  f = message.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated CallDetailRecord items = 1;
 * @return {!Array<!proto.fonoster.calls.v1beta2.CallDetailRecord>}
 */
proto.fonoster.calls.v1beta2.ListCallsResponse.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.fonoster.calls.v1beta2.CallDetailRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fonoster.calls.v1beta2.CallDetailRecord, 1));
};


/**
 * @param {!Array<!proto.fonoster.calls.v1beta2.CallDetailRecord>} value
 * @return {!proto.fonoster.calls.v1beta2.ListCallsResponse} returns this
*/
proto.fonoster.calls.v1beta2.ListCallsResponse.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fonoster.calls.v1beta2.CallDetailRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fonoster.calls.v1beta2.CallDetailRecord}
 */
proto.fonoster.calls.v1beta2.ListCallsResponse.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fonoster.calls.v1beta2.CallDetailRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fonoster.calls.v1beta2.ListCallsResponse} returns this
 */
proto.fonoster.calls.v1beta2.ListCallsResponse.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * optional string next_page_token = 2;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.ListCallsResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.ListCallsResponse} returns this
 */
proto.fonoster.calls.v1beta2.ListCallsResponse.prototype.setNextPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.calls.v1beta2.GetCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.calls.v1beta2.GetCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.calls.v1beta2.GetCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.GetCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.calls.v1beta2.GetCallRequest}
 */
proto.fonoster.calls.v1beta2.GetCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.calls.v1beta2.GetCallRequest;
  return proto.fonoster.calls.v1beta2.GetCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.calls.v1beta2.GetCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.calls.v1beta2.GetCallRequest}
 */
proto.fonoster.calls.v1beta2.GetCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.calls.v1beta2.GetCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.calls.v1beta2.GetCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.calls.v1beta2.GetCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.GetCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.GetCallRequest.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.GetCallRequest} returns this
 */
proto.fonoster.calls.v1beta2.GetCallRequest.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.calls.v1beta2.TrackCallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.calls.v1beta2.TrackCallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.calls.v1beta2.TrackCallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.TrackCallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
ref: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.calls.v1beta2.TrackCallRequest}
 */
proto.fonoster.calls.v1beta2.TrackCallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.calls.v1beta2.TrackCallRequest;
  return proto.fonoster.calls.v1beta2.TrackCallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.calls.v1beta2.TrackCallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.calls.v1beta2.TrackCallRequest}
 */
proto.fonoster.calls.v1beta2.TrackCallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.calls.v1beta2.TrackCallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.calls.v1beta2.TrackCallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.calls.v1beta2.TrackCallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.TrackCallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.calls.v1beta2.TrackCallRequest.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.calls.v1beta2.TrackCallRequest} returns this
 */
proto.fonoster.calls.v1beta2.TrackCallRequest.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.calls.v1beta2.TrackCallResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.calls.v1beta2.TrackCallResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.calls.v1beta2.TrackCallResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.TrackCallResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.calls.v1beta2.TrackCallResponse}
 */
proto.fonoster.calls.v1beta2.TrackCallResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.calls.v1beta2.TrackCallResponse;
  return proto.fonoster.calls.v1beta2.TrackCallResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.calls.v1beta2.TrackCallResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.calls.v1beta2.TrackCallResponse}
 */
proto.fonoster.calls.v1beta2.TrackCallResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fonoster.calls.v1beta2.TrackCallResponse.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.calls.v1beta2.TrackCallResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.calls.v1beta2.TrackCallResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.calls.v1beta2.TrackCallResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.calls.v1beta2.TrackCallResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.fonoster.calls.v1beta2.TrackCallResponse.Status = {
  TRYING: 0,
  CANCEL: 1,
  ANSWER: 2,
  BUSY: 3,
  PROGRESS: 4,
  NOANSWER: 5,
  FAILED: 6
};

/**
 * optional Status status = 1;
 * @return {!proto.fonoster.calls.v1beta2.TrackCallResponse.Status}
 */
proto.fonoster.calls.v1beta2.TrackCallResponse.prototype.getStatus = function() {
  return /** @type {!proto.fonoster.calls.v1beta2.TrackCallResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.fonoster.calls.v1beta2.TrackCallResponse.Status} value
 * @return {!proto.fonoster.calls.v1beta2.TrackCallResponse} returns this
 */
proto.fonoster.calls.v1beta2.TrackCallResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.fonoster.calls.v1beta2.CallType = {
  SIP_ORIGINATED: 0,
  API_ORIGINATED: 1
};

/**
 * @enum {number}
 */
proto.fonoster.calls.v1beta2.CallStatus = {
  UNKNOWN: 0,
  NORMAL_CLEARING: 1,
  CALL_REJECTED: 2,
  UNALLOCATED: 3,
  NO_USER_RESPONSE: 4,
  NO_ROUTE_DESTINATION: 5,
  NO_ANSWER: 6,
  USER_BUSY: 7,
  NOT_ACCEPTABLE_HERE: 8,
  SERVICE_UNAVAILABLE: 9,
  INVALID_NUMBER_FORMAT: 10
};

/**
 * @enum {number}
 */
proto.fonoster.calls.v1beta2.CallDirection = {
  FROM_PSTN: 0,
  TO_PSTN: 1,
  INTRA_NETWORK: 2
};

goog.object.extend(exports, proto.fonoster.calls.v1beta2);
